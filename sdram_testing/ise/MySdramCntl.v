// File: MySdramCntl.v
// Generated by MyHDL 1.0dev
// Date: Fri Oct  9 04:40:48 2015


`timescale 1ns/10ps

module MySdramCntl (
    clk_i,
    sd_intf_cke,
    sd_intf_we,
    sd_intf_addr,
    sd_intf_dqml,
    sd_intf_cas,
    sd_intf_dqmh,
    sd_intf_ras,
    sd_intf_bs,
    sd_intf_cs,
    sd_intf_dq,
    host_intf_wr_i,
    host_intf_done_o,
    host_intf_rdPending_o,
    host_intf_rst_i,
    host_intf_data_i,
    host_intf_data_o,
    host_intf_rd_i,
    host_intf_addr_i
);


input clk_i;
output sd_intf_cke;
reg sd_intf_cke;
output sd_intf_we;
reg sd_intf_we;
output [12:0] sd_intf_addr;
reg [12:0] sd_intf_addr;
output sd_intf_dqml;
reg sd_intf_dqml;
output sd_intf_cas;
reg sd_intf_cas;
output sd_intf_dqmh;
reg sd_intf_dqmh;
output sd_intf_ras;
reg sd_intf_ras;
output [1:0] sd_intf_bs;
reg [1:0] sd_intf_bs;
output sd_intf_cs;
reg sd_intf_cs;
inout [15:0] sd_intf_dq;
wire [15:0] sd_intf_dq;
input host_intf_wr_i;
output host_intf_done_o;
wire host_intf_done_o;
output host_intf_rdPending_o;
wire host_intf_rdPending_o;
input host_intf_rst_i;
input [15:0] host_intf_data_i;
output [15:0] host_intf_data_o;
wire [15:0] host_intf_data_o;
input host_intf_rd_i;
input [23:0] host_intf_addr_i;

reg [2:0] cmd_r;
reg [12:0] sAddr_x;
reg [2:0] cmd_x;
wire [12:0] row_s;
reg [12:0] sAddr_r;
reg [15:0] sdramData_x;
reg activateInProgress_s;
reg sDataDir_x;
reg sDataDir_r;
wire [1:0] ba_x;
reg [4:0] rdPipeline_r;
reg [13:0] rfshCntr_x;
reg [1:0] ba_r;
reg [4:0] rdPipeline_x;
reg [13:0] rfshCntr_r;
reg [15:0] sDriver;
reg [1:0] activeBank_x;
reg doActivate_s;
wire [1:0] bank_s;
reg [9:0] refTimer_r;
reg rdInProgress_s;
reg [9:0] refTimer_x;
reg writeInProgress_s;
reg [2:0] state_x;
reg [15:0] sData_r;
wire [8:0] col_s;
reg [2:0] state_r;
wire [15:0] sData_x;
reg [10:0] timer_x;
reg [4:0] wrPipeline_x;
reg [1:0] activeBank_r;
reg [1:0] wrTimer_x;
reg [4:0] wrPipeline_r;
reg [15:0] sdramData_r;
reg [1:0] wrTimer_r;
reg [10:0] timer_r;
reg [2:0] rasTimer_x;
reg [2:0] rasTimer_r;

reg [12:0] activeRow_x [0:4-1];
reg [12:0] activeRow_r [0:4-1];
reg activeFlag_x [0:4-1];
reg activeFlag_r [0:4-1];


assign sd_intf_dq = sDriver;


always @(cmd_r, row_s, activeRow_r[0], activeRow_r[1], activeRow_r[2], activeRow_r[3], sAddr_r, activateInProgress_s, activeBank_r, sDataDir_r, ba_x, rdPipeline_r, ba_r, rfshCntr_r, host_intf_wr_i, doActivate_s, bank_s, refTimer_r, rdInProgress_s, writeInProgress_s, col_s, state_r, wrTimer_r, timer_r, host_intf_rd_i, rasTimer_r, activeFlag_r[0], activeFlag_r[1], activeFlag_r[2], activeFlag_r[3]) begin: MYSDRAMCNTL_COMB_FUNC
    integer index;
    rdPipeline_x = {1'b0, rdPipeline_r[(3 + 2)-1:1]};
    wrPipeline_x = 5'h0;
    if ((rasTimer_r != 0)) begin
        rasTimer_x = (rasTimer_r - 1);
    end
    else begin
        rasTimer_x = rasTimer_r;
    end
    if ((wrTimer_r != 0)) begin
        wrTimer_x = (wrTimer_r - 1);
    end
    else begin
        wrTimer_x = wrTimer_r;
    end
    if ((refTimer_r != 0)) begin
        refTimer_x = (refTimer_r - 1);
        rfshCntr_x = rfshCntr_r;
    end
    else begin
        refTimer_x = 782;
        rfshCntr_x = (rfshCntr_r + 1);
    end
    cmd_x = cmd_r;
    state_x = state_r;
    sAddr_x = sAddr_r;
    activeBank_x = activeBank_r;
    sDataDir_x = sDataDir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        activeFlag_x[index] = activeFlag_r[index];
        activeRow_x[index] = activeRow_r[index];
    end
    if ((timer_r != 0)) begin
        timer_x = (timer_r - 1);
        cmd_x = 7;
    end
    else begin
        timer_x = timer_r;
        case (state_r)
            3'b000: begin
                timer_x = 2000;
                state_x = 3'b001;
            end
            3'b001: begin
                cmd_x = 2;
                timer_x = 2;
                state_x = 3'b011;
                sAddr_x = 512;
                rfshCntr_x = 8;
            end
            3'b011: begin
                cmd_x = 1;
                timer_x = 7;
                rfshCntr_x = (rfshCntr_r - 1);
                if ((rfshCntr_r == 1)) begin
                    state_x = 3'b010;
                end
            end
            3'b010: begin
                cmd_x = 0;
                timer_x = 2;
                state_x = 3'b100;
                sAddr_x = 48;
            end
            3'b100: begin
                if ((rfshCntr_r != 0)) begin
                    if (((activateInProgress_s == 1'b0) && (writeInProgress_s == 1'b0) && (rdInProgress_s == 1'b0))) begin
                        cmd_x = 2;
                        timer_x = 2;
                        state_x = 3'b110;
                        sAddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            activeFlag_x[index] = 1'b0;
                        end
                    end
                end
                else if ((host_intf_rd_i == 1'b1)) begin
                    if ((ba_x == ba_r)) begin
                        if ((doActivate_s == 1'b1)) begin
                            if (((activateInProgress_s == 1'b0) && (writeInProgress_s == 1'b0) && (rdInProgress_s == 1'b0))) begin
                                cmd_x = 2;
                                timer_x = 2;
                                state_x = 3'b101;
                                sAddr_x = 0;
                                activeFlag_x[bank_s] = 1'b0;
                            end
                        end
                        else if ((rdInProgress_s == 1'b0)) begin
                            cmd_x = 5;
                            sDataDir_x = 1'b0;
                            sAddr_x = col_s;
                            rdPipeline_x = {1'b1, rdPipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if ((host_intf_wr_i == 1'b1)) begin
                    if ((ba_x == ba_r)) begin
                        if ((doActivate_s == 1'b1)) begin
                            if (((activateInProgress_s == 1'b0) && (writeInProgress_s == 1'b0) && (rdInProgress_s == 1'b0))) begin
                                cmd_x = 2;
                                timer_x = 2;
                                state_x = 3'b101;
                                sAddr_x = 0;
                                activeFlag_x[bank_s] = 1'b0;
                            end
                        end
                        else if ((rdInProgress_s == 1'b0)) begin
                            cmd_x = 4;
                            sDataDir_x = 1'b1;
                            sAddr_x = col_s;
                            wrPipeline_x = 5'h1;
                            wrTimer_x = 2;
                        end
                    end
                end
                else begin
                    cmd_x = 7;
                    state_x = 3'b100;
                end
            end
            3'b101: begin
                cmd_x = 3;
                timer_x = 2;
                state_x = 3'b100;
                rasTimer_x = 5;
                sAddr_x = row_s;
                activeBank_x = bank_s;
                activeRow_x[bank_s] = row_s;
                activeFlag_x[bank_s] = 1'b1;
            end
            3'b110: begin
                cmd_x = 1;
                timer_x = 7;
                state_x = 3'b100;
                rfshCntr_x = (rfshCntr_r - 1);
            end
            default: begin
                state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge clk_i, posedge host_intf_rst_i) begin: MYSDRAMCNTL_SEQ_FUNC
    integer index;
    if (host_intf_rst_i == 1) begin
        cmd_r <= 7;
        rdPipeline_r <= 0;
        sdramData_r <= 0;
        ba_r <= 0;
        wrPipeline_r <= 0;
        sData_r <= 0;
        wrTimer_r <= 0;
        rfshCntr_r <= 0;
        sAddr_r <= 0;
        timer_r <= 0;
        activeRow_r[0] <= 0;
        activeRow_r[1] <= 0;
        activeRow_r[2] <= 0;
        activeRow_r[3] <= 0;
        activeBank_r <= 0;
        refTimer_r <= 782;
        state_r <= 3'b000;
        rasTimer_r <= 0;
        sDataDir_r <= 0;
        activeFlag_r[0] <= 0;
        activeFlag_r[1] <= 0;
        activeFlag_r[2] <= 0;
        activeFlag_r[3] <= 0;
    end
    else begin
        state_r <= state_x;
        cmd_r <= cmd_x;
        sAddr_r <= sAddr_x;
        sData_r <= sData_x;
        sDataDir_r <= sDataDir_x;
        activeBank_r <= activeBank_x;
        sdramData_r <= sdramData_x;
        wrPipeline_r <= wrPipeline_x;
        rdPipeline_r <= rdPipeline_x;
        ba_r <= ba_x;
        timer_r <= timer_x;
        rasTimer_r <= rasTimer_x;
        refTimer_r <= refTimer_x;
        wrTimer_r <= wrTimer_x;
        rfshCntr_r <= rfshCntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            activeRow_r[index] <= activeRow_x[index];
            activeFlag_r[index] <= activeFlag_x[index];
        end
    end
end


always @(cmd_r, sData_r, sAddr_r, bank_s, sDataDir_r) begin: MYSDRAMCNTL_SDRAM_PIN_MAP
    sd_intf_cke = 1;
    sd_intf_cs = 0;
    sd_intf_ras = cmd_r[2];
    sd_intf_cas = cmd_r[1];
    sd_intf_we = cmd_r[0];
    sd_intf_bs = bank_s;
    sd_intf_addr = sAddr_r;
    if ((sDataDir_r == 1'b1)) begin
        sDriver = sData_r;
    end
    else begin
        sDriver = 'bz;
    end
    sd_intf_dqml = 0;
    sd_intf_dqmh = 0;
end



assign host_intf_done_o = (rdPipeline_r[0] || wrPipeline_r[0]);
assign host_intf_data_o = sdramData_r;
assign host_intf_rdPending_o = rdInProgress_s;
assign sData_x = host_intf_data_i;



assign bank_s = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign ba_x = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign row_s = host_intf_addr_i[(13 + 9)-1:9];
assign col_s = host_intf_addr_i[9-1:0];


always @(activeRow_r[0], activeRow_r[1], activeRow_r[2], activeRow_r[3], rdPipeline_r, bank_s, sdramData_r, activeBank_r, wrTimer_r, sd_intf_dq, row_s, rasTimer_r, activeFlag_r[0], activeFlag_r[1], activeFlag_r[2], activeFlag_r[3]) begin: MYSDRAMCNTL_DO_ACTIVE
    if (((bank_s != activeBank_r) || (row_s != activeRow_r[bank_s]) || (activeFlag_r[bank_s] == 1'b0))) begin
        doActivate_s = 1'b1;
    end
    else begin
        doActivate_s = 1'b0;
    end
    if ((rdPipeline_r[1] == 1'b1)) begin
        sdramData_x = sd_intf_dq;
    end
    else begin
        sdramData_x = sdramData_r;
    end
    if ((rasTimer_r != 0)) begin
        activateInProgress_s = 1'b1;
    end
    else begin
        activateInProgress_s = 1'b0;
    end
    if ((wrTimer_r != 0)) begin
        writeInProgress_s = 1'b1;
    end
    else begin
        writeInProgress_s = 1'b0;
    end
    if ((rdPipeline_r[(3 + 2)-1:1] != 0)) begin
        rdInProgress_s = 1'b1;
    end
    else begin
        rdInProgress_s = 1'b0;
    end
end

endmodule
